buildscript {
    repositories {
        maven {
            name = "central"
            url = "https://repo.maven.apache.org/maven2/"
        }
        maven {
            name = "jcenter"
            url = "https://jcenter.bintray.com/"
        }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
        //classpath 'de.undercouch:gradle-download-task:4.1.2'
    }
}

apply plugin: 'forge'
apply from: 'force-https.gradle'

version = "1.0"
group= "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

//sourceCompatibility = targetCompatibility = 1.7 //using java 7
compileJava.options.encoding = "UTF-8"

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "central"
        url = "https://repo.maven.apache.org/maven2/"
    }
    maven {
        name = "jcenter"
        url = "https://jcenter.bintray.com/"
    }
    maven {
        name = "mcmoddev"
        url = "https://maven.mcmoddev.com/"
    }
    maven {
        name = "forge"
        url = "https://maven.minecraftforge.net/"
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*'])
}



minecraft {
	version = "1.6.4-9.11.1.964"
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod/info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import java.io.FileOutputStream
import java.io.InputStream
import java.net.URL
import java.net.HttpURLConnection

task downloadCustomClient {
    doLast {
        def url = new URL('https://launcher.mojang.com/v1/objects/1703704407101cf72bd88e68579e3696ce733ecd/client.jar')
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestProperty('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36')

        InputStream inputStream = connection.getInputStream()
        FileOutputStream outputStream = new FileOutputStream("${System.getProperty("user.home")}/.gradle/caches/minecraft/net/minecraft/minecraft/1.6.4/minecraft-1.6.4.jar")

        byte[] buffer = new byte[1024]
        int bytesRead
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead)
        }

        outputStream.close()
        inputStream.close()
    }
}

tasks.downloadClient.enabled = false
//tasks.downloadClient.dependsOn downloadCustomClient

task downloadCustomServer {
    doLast {
        def url = new URL('https://launcher.mojang.com/v1/objects/050f93c1f3fe9e2052398f7bd6aca10c63d64a87/server.jar')
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestProperty('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36')

        InputStream inputStream = connection.getInputStream()
        FileOutputStream outputStream = new FileOutputStream("${System.getProperty("user.home")}/.gradle/caches/minecraft/net/minecraft/minecraft_server/1.6.4/minecraft_server-1.6.4.jar")

        byte[] buffer = new byte[1024]
        int bytesRead
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead)
        }

        outputStream.close()
        inputStream.close()
    }
}

tasks.downloadServer.enabled = false
//tasks.downloadServer.dependsOn downloadCustomServer


task getCustomAssetsIndex {
    doLast {
        //def url = new URL('https://web.archive.org/web/20160912234309/https://s3.amazonaws.com/Minecraft.Download/indexes/legacy.json')
        def url = new URL('https://www.dropbox.com/s/dm9lmcq29z2e5qo/legacy.json?dl=1')
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestProperty('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36')

        InputStream inputStream = connection.getInputStream()
        FileOutputStream outputStream = new FileOutputStream("${System.getProperty("user.home")}/.gradle/caches/minecraft/assets/indexes/legacy.json")

        byte[] buffer = new byte[1024]
        int bytesRead
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead)
        }

        outputStream.close()
        inputStream.close()
    }
}


//tasks.getAssetsIndex.dependsOn getCustomAssetsIndex
tasks.getAssetsIndex.enabled = false
tasks.getAssets.doFirst {
    tasks.getAssets.assetsIndex = file("${System.getProperty("user.home")}/.gradle/caches/minecraft/assets/indexes/legacy.json")
}

